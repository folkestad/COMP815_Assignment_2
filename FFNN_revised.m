% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created Mon Sep 18 10:58:10 NZST 2017
%
% This script assumes these variables are defined:
%
%   X - input data.
%   T - target data.

% Clear Workspace
clear all;

% Load data
load('binaryalphadigs.mat')

% Reshape and format the input (WRONG)
% data = dat(:);
% X = zeros(20*16, 36*39);
% for i = 1:size(data)
%     pixels_r = reshape(data{i}, [], 1);
%     pixels = data{i}(:);
%     for j = 1:size(pixels(:))
%         X(j, i) = pixels(j);
%     end
% end

% Reshape the input in column format (HOPEFULLY CORRECT)
X = zeros(20*16, 36*39);
pos = 1;
for i = 1:size(dat, 1)
    for j = 1:size(dat, 2)
        pixels = dat{i,j}(:);
        for k = 1:size(pixels)
            X(k, pos) = pixels(k);
        end
        pos = pos + 1;
    end
end

% Create one-hot encoded targets in column format
T = zeros(36, 36*39);
value = 1;
for i = 1:36*39
    T(value, i) = 1;
    if mod(i, 39) == 0
        value = value + 1;
    end
end

% Merge, shuffle and split data + targets
% ALL_DATA = cat(1, X, T);
% SHUFFELED_DATA = ALL_DATA(:, randperm(size(ALL_DATA, 2)));
% SPLIT_DATA = mat2cell(SHUFFELED_DATA, [320, 36], 1404);
% X = cell2mat(SPLIT_DATA(1));
% T = cell2mat(SPLIT_DATA(2));

% Start Pattern Recognition Network Code
x = X;
t = T;

% Create a Pattern Recognition Network
hiddenLayer1 = 150;
hiddenLayer2 = 150;
% net = patternnet([hiddenLayer1 hiddenLayer2]);
net = patternnet(hiddenLayer1);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns = {'removeconstantrows','mapminmax'};
net.output.processFcns = {'removeconstantrows','mapminmax'};


% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivide
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideMode = 'sample';  % Divide up every sample
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% For help on training function 'trainscg' type: help trainscg
% For a list of all training functions type: help nntrain
net.trainFcn = 'trainscg';  % Scaled conjugate gradient

% Set training parameters
net.trainParam.showCommandLine = true;
% net.trainParam.goal = 0.01;
net.trainParam.max_fail = 10;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'crossentropy';  % Cross-entropy

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
  'plotregression', 'plotfit'};


% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);
performance = perform(net,t,y);

% Recalculate Training, Validation and Test Performance
trainTargets = t .* tr.trainMask{1};
valTargets = t  .* tr.valMask{1};
testTargets = t  .* tr.testMask{1};
trainPerformance = perform(net,trainTargets,y);
valPerformance = perform(net,valTargets,y);
testPerformance = perform(net,testTargets,y);

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, plotconfusion(t,y)
%figure, plotroc(t,y)
%figure, ploterrhist(e)

% Deployment
% Change the (false) values to (true) to enable the following code blocks.
if (false)
  % Generate MATLAB function for neural network for application deployment
  % in MATLAB scripts or with MATLAB Compiler and Builder tools, or simply
  % to examine the calculations your trained neural network performs.
  genFunction(net,'myNeuralNetworkFunction');
  y = myNeuralNetworkFunction(x);
end
if (false)
  % Generate a matrix-only MATLAB function for neural network code
  % generation with MATLAB Coder tools.
  genFunction(net,'myNeuralNetworkFunction','MatrixOnly','yes');
  y = myNeuralNetworkFunction(x);
end
if (false)
  % Generate a Simulink diagram for simulation or deployment with.
  % Simulink Coder tools.
  gensim(net);
end
